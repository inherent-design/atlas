[project]
name = "atlas"
version = "0.1.0"
authors = [{ name = "zer0cell", email = "mannie@inherent.design" }]
description = "Advanced Multi-Modal Learning & Guidance Framework"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "langgraph>=0.4.5",
    "chromadb>=1.0.9",
    "anthropic>=0.51.0",
    "pydantic>=2.11.4",
    "pathspec>=0.12.1",
    "python-dotenv>=1.1.0",
    "openai>=1.78.1",
    "ollama>=0.4.8",
    "watchdog>=6.0.0",
    "structlog>=25.3.0",
    "rich>=14.0.0",
    "blinker>=1.9.0",
    "taskmap>=0.0.6",
    "effect>=1.1.0",
    "marshmallow>=4.0.0",
    "diffsync>=2.1.0",
    "eventsourcing>=9.4.5",
    "aspectlib>=2.0.0",
    "dependency-injector>=4.46.0",
    "pyrsistent>=0.20.0",
    "textual>=3.2.0",
]

[project.optional-dependencies]
psutil = [
    "pytest-xdist>=3.6.1",
]

[dependency-groups]
dev = [
    # Type checking
    "mypy>=1.15.0",
    "mypy-extensions>=1.1.0",
    "types-requests>=2.32.0.20250328",
    # Testing
    "coverage>=7.8.0",
    "pytest>=8.3.5",
    "pytest-xdist>=3.6.1",
    "pytest-cov>=6.1.1",
    "pytest-asyncio>=0.26.0",
    # Code quality tools
    "ruff>=0.11.10",
    "black>=25.1.0",
    "isort>=6.0.1",
    "pre-commit>=4.2.0",
    "pydoc-markdown>=4.8.2",
]

[[tool.pydoc-markdown.loaders]]
type = "python"
search_path = ["./atlas"]

[tool.mypy]
python_version = "3.13"
strict = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_ignores = true
warn_unused_configs = true
no_implicit_reexport = true
ignore_missing_imports = true
show_error_codes = true
pretty = true
exclude = ["docs"]

[tool.black]
line-length = 100
target-version = ["py313"]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | docs
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true

[tool.ruff]
line-length = 100
fix = true
show-fixes = true
src = ["atlas"]
respect-gitignore = true
exclude = [
    ".git",
    ".github",
    ".venv",
    "__pycache__",
    "docs",
    "tests",
    "dist",
    "build",
]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "B",    # flake8-bugbear (bugs/design problems)
    "I",    # isort
    "C4",   # flake8-comprehensions (better list/dict comprehensions)
    "SIM",  # flake8-simplify (code simplification)
    "UP",   # pyupgrade (new Python syntax)
    "PT",   # pytest style
    "RUF",  # ruff-specific rules
]
ignore = [
    "E501", # line too long (handled by black)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]    # Ignore unused imports in __init__.py files
"tests/*" = ["PT004"]       # Ignore assertion fixture issues in tests

[tool.ruff.lint.isort]
known-first-party = ["atlas"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.pytest.ini_options]
testpaths = ["atlas/tests"]
python_files = "test_*.py"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
]
log_format = "%(name)s %(asctime)s %(levelname)s %(message)s"
log_date_format = "%Y-%m-%d %H:%M:%S"
log_cli = false
log_cli_level = "ERROR"
log_file_level = "DEBUG"
log_file = "pytest.log"
log_auto_indent = true
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"
verbose = 2
addopts = [
    "--cov=atlas",
    "--no-cov-on-fail",
    "--cov-report=term",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-report=json",
    "--cov-branch"
]

[tool.coverage.run]
source = ["atlas"]
omit = [
    "*/tests/*",
    "*/examples/*",
]
branch = true
parallel = true

[tool.coverage.report]
exclude_also = [
    "def __repr__",
    "if self\\.debug",

    "raise AssertionError",
    "raise NotImplementedError",

    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",

    "@(abc\\.)?abstractmethod",

    "except ImportError:",
    "raise ImportError",

    "\\.\\.\\.",

    "@overload",
]
show_missing = true
precision = 2
skip_covered = true
skip_empty = true

[tool.coverage.paths]
source = [
    "atlas/",
    "*/atlas/",
]

[tool.coverage.html]
directory = "coverage_html"
show_contexts = true

[tool.coverage.xml]
output = "coverage.xml"

[tool.coverage.json]
output = "coverage.json"
